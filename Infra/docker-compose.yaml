version: '3.8'

services:
  seq:
    container_name: uf2poc-seq
    image: datalust/seq:2024.1.11028
    ports:
      - 5340:15340
      - 5341:15341
    environment:
      - ACCEPT_EULA=Y
      - SEQ_LICENSE=trial
    volumes:
      - ./seq:/data
    networks:
      - uf2poc

  kafka-server:
    container_name: uf2poc-kafka-server
    image: bitnami/kafka:3.6.1
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-server:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_MESSAGE_MAX_BYTES=2000000
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-server:9092 --list > /dev/null 2>&1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - uf2poc

  kafka-init:
    container_name: uf2poc-kafka-init
    image: bitnami/kafka:3.6.1
    volumes:
      - ./kafka/create-topics.sh:/create-topics.sh
    command: /bin/bash -c "sleep 20 && /create-topics.sh"
    depends_on:
      - kafka-server
    networks:
      - uf2poc

  redpanda-server:
    container_name: uf2poc-redpanda-server
    image: redpandadata/redpanda:v23.3.11
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-server:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-server:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-server:33145
      - --advertise-rpc-addr redpanda-server:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda-server:/var/lib/redpanda/data
    networks:
      - uf2poc

  redpanda-console:
    container_name: uf2poc-redpanda-console
    image: redpandadata/console:v2.4.5
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-server:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-server:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-server:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda-server
    networks:
      - uf2poc

volumes:
  redpanda-server: null

networks:
  uf2poc:
    name: uf2poc